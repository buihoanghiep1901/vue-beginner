let a: number|string|boolean...

let a=5 -> type number
    a.toLowerCase  Wrong

var a='123' -> type string

function abc( a:number, b:string, c?:boolena): string{
    ...
    return 'abc'
}


type aliases

    type User= {
        readonly id: string|number
        name: string
        phone: number
        age: number
    }

    const user: User

union type
    let a: number | string -> a=7 or a='7'
    
    let role: 'admin'|'user'= 'user'
    
    type User{
        name: string
    }
   
    type Admin{
        username: string
    }

    let hiep: User | Admin={
        username: 'bhh123'
    }



TS in vue
    props (script setup)
        const props = defineProps({
            foo: { type: String, required: true },
            bar: Number
        })

        interface Props {
            foo: string
            bar?: number
        }
        --> const props = defineProps<Props>()
            
        --> const props = withDefaults(defineProps<Props>(), {
                msg: 'hello',
                labels: () => ['one', 'two']
            }) // if prop have default value

    Events
        const emit = defineEmits<{
            change: [id: number]
            update: [value: string]
        }>()

    ref()
        const age= ref(10) --> type : Ref<number>

        const year: Ref<string | number> = ref('2020')

        const year = ref<string | number>('2020') --> type : Ref<string | number>

    computed()
        const double = computed(() => count.value++) --> type: ComputedRef<number>

        const double = computed<number>(() => {
            ...
        })



